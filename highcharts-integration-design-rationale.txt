1) there is a 'chartService' for angular which can hold any number of named 'charts'.
   this is really just an object store that assigns names to arbitrary objects, but could
   be viewed as a typed store for some chart-data-model-interface.

2) there is a class 'pageviewChartModel' which implements a data model for charting
   one or more named sets of pageviews over some range of dates. you could imagine
   the class conforming to some chart-data-model-interface.

3) there is an angular element-only directive 'highchart' with required attribute
   'chart-name="foo"' that loads a highcharts chart onto the <highchart> element
   using jquery and creates a binding to chartService.getChart(@chartName), updating
   the chart view on any changes to the model that was supplied to
   chartService.createChart(name, model).


so the usage becomes something like ..

<highchart chart-name="myChart" ng-controller="myController" />

----------------

angular.module('app', [])
.controller('myController', ['chartService', function(chartService)
{
    var chart = chartService.createChart('myChart', new pageviewChartModel());
    chart.setDateRange(from, to);
    chart.addDataset('Nuclear fusion', [1,2,3,4,5,6,7, ...]);
}]);

----------------

attempted features of this design:

1) there is separation between data and display, e.g. it is perfectly possible to
   declare and populate a chart without actually displaying it (usually a good feature for testing?)
   and you could display the same data using different views by simply adding
   some other directive like <othercoolchart chart-name="myChart" />

2) there is generality in the chartService and the idea of chart data models.
